#include<stdio.h>
#include<stdlib.h>

#define MAX_SIZE 100
#define INF 99999

typedef struct{
    int x,y;
    int distance;
} Node;

int directions[4][2]={{-1,0},{1,0},{0,-1},{0,1}};

int isValid(int x,int y,int rows,int cols,int** grid,int** visited){
    return(x>=0 && x < rows && y>=0 && y< cols && grid[x][y]==0 && !visited[x][y]);
}

int findShortestPath(int** grid,int rows,int cols,int startX,int startY,int goalX,int goalY){
    int** visited=(int**)malloc(rows*sizeof(int*));
    for(int i=0;i< rows;i++){
        visited[i] =(int*)calloc(cols,sizeof(int));
    }

    Node queue[MAX_SIZE*MAX_SIZE];
    int front=0,rear=0;
    
    queue[rear++] =(Node){startX,startY,0};
    visited[startX][startY]=1;

    while(front< rear){
        Node current=queue[front++];
        
        if(current.x==goalX && current.y==goalY){
            for(int i=0;i< rows;i++) free(visited[i]);
            free(visited);
            return current.distance;
        }

        for(int i=0;i< 4;i++){
            int newX=current.x + directions[i][0];
            int newY=current.y + directions[i][1];

            if(isValid(newX,newY,rows,cols,grid,visited)){
                visited[newX][newY]=1;
                queue[rear++] =(Node){newX,newY,current.distance + 1};
            }
        }
    }

    for(int i=0;i< rows;i++) free(visited[i]);
    free(visited);
    return -1;
}

int main(){
    int rows,cols;
    printf("Enter number of rows and columns: ");
    scanf("%d %d",&rows,&cols);

    int** grid =(int**)malloc(rows*sizeof(int*));
    for(int i=0;i< rows;i++){
        grid[i] =(int*)malloc(cols*sizeof(int));
    }

    printf("Enter the grid(0 for open space,1 for obstacle):\n");
    for(int i=0;i< rows;i++){
        for(int j=0;j< cols;j++){
            scanf("%d",&grid[i][j]);
        }
    }

    int startX,startY,goalX,goalY;
    printf("Enter start position(x y): ");
    scanf("%d %d",&startX,&startY);
    printf("Enter goal position(x y): ");
    scanf("%d %d",&goalX,&goalY);

    int result=findShortestPath(grid,rows,cols,startX,startY,goalX,goalY);
    if(result != -1){
        printf("Shortest path length: %d\n",result);
    } else{
        printf("No path found.\n");
    }

    for(int i=0;i< rows;i++){
        free(grid[i]);
    }
    free(grid);
    return 0;
}
