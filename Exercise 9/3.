#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

#define INF INT_MAX

int findMinDistance(int* distance,int* visited,int numNodes){
    int min=INF,minIndex;
    for(int i=0;i< numNodes;i++){
        if(!visited[i] && distance[i]<= min){
            min=distance[i];
            minIndex=i;
        }
    }
    return minIndex;
}

void dijkstra(int** graph,int numNodes,int startNode){
    int* distance =(int*)malloc(numNodes*sizeof(int));
    int* visited =(int*)calloc(numNodes,sizeof(int));

    for(int i=0;i< numNodes;i++){
        distance[i]=INF;
    }
    distance[startNode]=0;

    for(int count=0;count< numNodes - 1;count++){
        int u=findMinDistance(distance,visited,numNodes);
        visited[u]=1;

        for(int v=0;v< numNodes;v++){
            if(!visited[v] && graph[u][v] && distance[u] != INF && distance[u] + graph[u][v]< distance[v]){
                distance[v]=distance[u] + graph[u][v];
            }
        }
    }

    printf("Node\tDistance from Source\n");
    for(int i=0;i< numNodes;i++){
        if(distance[i]==INF){
            printf("%d\tINF\n",i);
        } else{
            printf("%d\t%d\n",i,distance[i]);
        }
    }

    free(distance);
    free(visited);
}

int main(){
    int numNodes;
    printf("Enter the number of nodes(warehouses and clients): ");
    scanf("%d",&numNodes);

    int** graph =(int**)malloc(numNodes*sizeof(int*));
    for(int i=0;i< numNodes;i++){
        graph[i] =(int*)malloc(numNodes*sizeof(int));
        for(int j=0;j< numNodes;j++){
            printf("Enter weight of edge from %d to %d(0 if no edge): ",i,j);
            scanf("%d",&graph[i][j]);
            if(i != j && graph[i][j]==0){
                graph[i][j]=INF;// No edge
            }
        }
    }

    int startNode;
    printf("Enter the starting node: ");
    scanf("%d",&startNode);

    dijkstra(graph,numNodes,startNode);

    for(int i=0;i< numNodes;i++){
        free(graph[i]);
    }
    free(graph);

    return 0;
}
