#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    char data;           
    struct Node* next;   
} Node;

typedef struct {
    Node* top;           
} Stack;

void initializeStack(Stack* stack);
int isEmpty(Stack* stack);
void push(Stack* stack, char c);
char pop(Stack* stack);
int isBalanced(const char* expression);

int main() {
    char expression[100];
    
    printf("Enter an expression with parentheses: ");
    fgets(expression, sizeof(expression), stdin);
    
    if (isBalanced(expression)) {
        printf("The parentheses are balanced.\n");
    } else {
        printf("The parentheses are not balanced.\n");
    }

    return 0;
}

void initializeStack(Stack* stack) {
    stack->top = NULL;
}
int isEmpty(Stack* stack) {
    return stack->top == NULL;
}

void push(Stack* stack, char c) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = c;
    newNode->next = stack->top;
    stack->top = newNode;
}

char pop(Stack* stack) {
    if (isEmpty(stack)) {
        return '\0'; 
    }
    Node* temp = stack->top;
    char popped = temp->data;
    stack->top = stack->top->next;
    free(temp);
    return popped;
}
int isBalanced(const char* expression) {
    Stack stack;
    initializeStack(&stack);

  
    for (int i = 0; expression[i] != '\0'; i++) {
        char c = expression[i];

        if (c == '(') {
            push(&stack, c);  
        } else if (c == ')') {
            if (isEmpty(&stack)) {
                return 0; 
            }
            pop(&stack); 
        }
    }
    return isEmpty(&stack);
}
